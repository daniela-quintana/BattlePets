{"ast":null,"code":"var _jsxFileName = \"/Users/osx/Box Sync/Laboratoria/Proyectos/BattlePets/src/app/App.js\";\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Grid, Row } from 'react-bootstrap';\nimport '../assets/css/App.css';\nimport BattleField from './components/BattleField.js';\nimport Nav from \"./components/Nav\";\nimport Stats from \"./components/Stats\";\nimport { shipTypes } from './constants/constants';\nimport { getBattleField, makeClone } from './helpers/generateBattleField';\nimport { getMaxHits } from './helpers/getMaxHits';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      battleField: null,\n      flotilla: null,\n      shots: 0,\n      hits: 0,\n      maxHits: 0,\n      screenMode: null\n    };\n  }\n\n  componentWillMount() {\n    const maxHits = getMaxHits();\n\n    let newFlotilla = _.cloneDeep(shipTypes);\n\n    this.setState({\n      flotilla: newFlotilla,\n      maxHits: maxHits\n    });\n  }\n\n  onClick() {\n    let newFlotilla = _.cloneDeep(shipTypes);\n\n    this.setState({\n      battleField: getBattleField(),\n      hits: 0,\n      shots: 0,\n      flotilla: newFlotilla\n    });\n  }\n\n  resetGame() {\n    let newFlotilla = _.cloneDeep(shipTypes);\n\n    this.setState({\n      battleField: null,\n      hits: 0,\n      shots: 0,\n      flotilla: newFlotilla\n    });\n  }\n\n  onCellClick(x, y) {\n    let newBattleField = makeClone(this.state.battleField);\n    let shot = this.state.shots + 1;\n    let hits = this.state.hits;\n    let newFlotilla = [...this.state.flotilla];\n    let cellValue = this.state.battleField[x][y];\n\n    if (cellValue >= 100) {\n      switch (cellValue) {\n        case 100:\n          newFlotilla[0].hits = newFlotilla[0].hits + 1;\n          break;\n\n        case 200:\n          newFlotilla[1].hits = newFlotilla[1].hits + 1;\n          break;\n\n        case 300:\n          newFlotilla[2].hits = newFlotilla[2].hits + 1;\n          break;\n\n        case 400:\n          newFlotilla[3].hits = newFlotilla[3].hits + 1;\n          break;\n\n        case 500:\n          newFlotilla[4].hits = newFlotilla[4].hits + 1;\n          break;\n      }\n\n      newBattleField[x][y] = 'hitted';\n      hits += 1;\n      this.setState({\n        battleField: newBattleField,\n        hits: hits,\n        shots: shot,\n        flotilla: newFlotilla\n      });\n    } else {\n      newBattleField[x][y] = 'miss';\n      this.setState({\n        battleField: newBattleField,\n        shots: shot\n      });\n    }\n  }\n\n  updateDimensions(dimension) {\n    if (dimension < 992) {\n      this.setState({\n        screenMode: 'tablet'\n      });\n    } else {\n      this.setState({\n        screenMode: 'desktop'\n      });\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => this.updateDimensions(window.innerWidth));\n    this.updateDimensions(window.innerWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () => this.updateDimensions(window.innerWidth));\n  }\n\n  render() {\n    let _this$state = this.state,\n        battleField = _this$state.battleField,\n        flotilla = _this$state.flotilla,\n        hits = _this$state.hits,\n        screenMode = _this$state.screenMode,\n        shots = _this$state.shots;\n    let statsPanel = React.createElement(Stats, {\n      flotilla: flotilla,\n      hits: hits,\n      shots: shots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    });\n    let battleFieldPanel = React.createElement(BattleField, {\n      hits: hits,\n      battleField: battleField,\n      onClick: () => this.onClick(),\n      onCellClick: (x, y) => this.onCellClick(x, y),\n      screenMode: screenMode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"main-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      resetGame: () => this.resetGame(),\n      screenMode: screenMode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, screenMode === 'desktop' ? React.createElement(Row, {\n      className: \"show-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, statsPanel, battleFieldPanel) : React.createElement(Row, {\n      className: \"show-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, battleFieldPanel, statsPanel)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/BattlePets/src/app/App.js"],"names":["_","React","Component","Grid","Row","BattleField","Nav","Stats","shipTypes","getBattleField","makeClone","getMaxHits","App","constructor","props","state","battleField","flotilla","shots","hits","maxHits","screenMode","componentWillMount","newFlotilla","cloneDeep","setState","onClick","resetGame","onCellClick","x","y","newBattleField","shot","cellValue","updateDimensions","dimension","componentDidMount","window","addEventListener","innerWidth","componentWillUnmount","removeEventListener","render","statsPanel","battleFieldPanel"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap-theme.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport _ from 'lodash'\nimport React, { Component } from 'react';\nimport { Grid, Row } from 'react-bootstrap';\nimport '../assets/css/App.css';\nimport BattleField from './components/BattleField.js';\nimport Nav from \"./components/Nav\";\nimport Stats from \"./components/Stats\";\nimport { shipTypes } from './constants/constants';\nimport { getBattleField, makeClone } from './helpers/generateBattleField';\nimport { getMaxHits } from './helpers/getMaxHits';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      battleField: null,\n      flotilla: null,\n      shots: 0,\n      hits: 0,\n      maxHits: 0,\n      screenMode: null\n    }\n  }\n\n  componentWillMount() {\n    const maxHits = getMaxHits();\n    let newFlotilla = _.cloneDeep(shipTypes);\n    this.setState({\n      flotilla: newFlotilla,\n      maxHits: maxHits\n    });\n  }\n\n  onClick() {\n    let newFlotilla = _.cloneDeep(shipTypes);\n    this.setState({\n      battleField: getBattleField(),\n      hits: 0,\n      shots: 0,\n      flotilla: newFlotilla\n    })\n  }\n\n  resetGame() {\n    let newFlotilla = _.cloneDeep(shipTypes);\n    this.setState({\n      battleField: null,\n      hits: 0,\n      shots: 0,\n      flotilla: newFlotilla\n    })\n  }\n\n  onCellClick(x, y) {\n    let newBattleField = makeClone(this.state.battleField);\n    let shot = this.state.shots + 1;\n    let hits = this.state.hits;\n    let newFlotilla = [...this.state.flotilla];\n    let cellValue = this.state.battleField[x][y];\n    if (cellValue >= 100) {\n      switch (cellValue) {\n        case 100:\n          newFlotilla[0].hits = newFlotilla[0].hits + 1;\n          break;\n        case 200:\n          newFlotilla[1].hits = newFlotilla[1].hits + 1;\n          break;\n        case 300:\n          newFlotilla[2].hits = newFlotilla[2].hits + 1;\n          break;\n        case 400:\n          newFlotilla[3].hits = newFlotilla[3].hits + 1;\n          break;\n        case 500:\n          newFlotilla[4].hits = newFlotilla[4].hits + 1;\n          break;\n      }\n      newBattleField[x][y] = 'hitted';\n      hits += 1;\n      this.setState({\n        battleField: newBattleField,\n        hits: hits,\n        shots: shot,\n        flotilla: newFlotilla\n      })\n    } else {\n      newBattleField[x][y] = 'miss';\n      this.setState({\n        battleField: newBattleField,\n        shots: shot\n      })\n    }\n  }\n\n  updateDimensions(dimension) {\n    if (dimension < 992) {\n      this.setState({\n        screenMode: 'tablet'\n      })\n    } else {\n      this.setState({\n        screenMode: 'desktop'\n      })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => this.updateDimensions(window.innerWidth));\n    this.updateDimensions(window.innerWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () => this.updateDimensions(window.innerWidth));\n  }\n\n  render() {\n    let { battleField, flotilla, hits, screenMode, shots } = this.state;\n    let statsPanel = (\n      <Stats\n        flotilla={flotilla}\n        hits={hits}\n        shots={shots}\n      />\n    );\n    let battleFieldPanel = (\n      <BattleField\n        hits={hits}\n        battleField={battleField}\n        onClick={() => this.onClick()}\n        onCellClick={(x, y) => this.onCellClick(x, y)}\n        screenMode={screenMode}\n      />\n    );\n\n    return (\n      <div className='main-content'>\n        <Nav\n          resetGame={() => this.resetGame()}\n          screenMode={screenMode}\n        />\n        <Grid>\n          {\n            screenMode === 'desktop'\n              ? <Row className='show-grid'>{statsPanel}{battleFieldPanel}</Row>\n              : <Row className='show-grid'>{battleFieldPanel}{statsPanel}</Row>\n          }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}